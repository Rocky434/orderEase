#!/usr/bin/env node

/**
 * Module dependencies.
 */

require('dotenv').config(); //將.env的環境變數加載到Node.js 的 process.env 中。
const db = require('../db/db');
db()
  .then(() => {
    let app = require('../app');
    let debug = require('debug')('login:server');
    let http = require('http');

    const socketIo = require('socket.io');

    /**
     * Get port from environment and store in Express.
     */

    const port = normalizePort(process.env.PORT || '3000');
    app.set('port', port);

    /**
     * Create HTTP server.
     */

    let server = http.createServer(app);




    // 在 HTTP 伺服器上建立 Socket.io 連線
    const io = socketIo(server);
    let connectionsMap = new Map();
    let storeID;
    io.on('connection', (socket) => {

      socket.on('storeId', (storeId) => {
        storeID = storeId;
        //console.log(storeId);
        connectionsMap.set(storeId, socket);
      })

      socket.on('clientSid', (clientId) => {
        connectionsMap.set(clientId, socket);
      })

      socket.on('completeOrder', (sid) => {
        // 根據 sid 找到對應的 socket
        const targetSocket = connectionsMap.get(sid);
        console.log(sid);
        if (targetSocket) {
          console.log("哈囉");
          targetSocket.emit('modifyClientOrderExpiration'); // 向特定客戶端發送訂單完成通知
        }
      });
      //socket.on('')
      // 在這裡可以設置與客戶端的交互行為
      socket.on('addOrder', () => {
        if (storeID) {
          const targetSocket = connectionsMap.get(storeID);
          targetSocket.emit('reloadPendingOrder');
        }
      });

      socket.on('disconnect', () => {

      });
    });

    /**
        * Listen on provided port, on all network interfaces.
    */
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);



    /**
     * Normalize a port into a number, string, or false.
     */

    function normalizePort(val) {
      var port = parseInt(val, 10);

      if (isNaN(port)) {
        // named pipe
        return val;
      }

      if (port >= 0) {
        // port number
        return port;
      }

      return false;
    }

    /**
     * Event listener for HTTP server "error" event.
     */

    function onError(error) {
      if (error.syscall !== 'listen') {
        throw error;
      }

      var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

      // handle specific listen errors with friendly messages
      switch (error.code) {
        case 'EACCES':
          console.error(bind + ' requires elevated privileges');
          process.exit(1);
          break;
        case 'EADDRINUSE':
          console.error(bind + ' is already in use');
          process.exit(1);
          break;
        default:
          throw error;
      }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */

    function onListening() {
      var addr = server.address();
      var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
      debug('Listening on ' + bind);
    }
  })
  .catch((error) => {
    console.log(error);
  })