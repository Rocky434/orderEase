<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/stylesheets/orderRecords.css" />
    <script src="https://cdn.jsdelivr.net/npm/socket.io-client/dist/socket.io.js"></script>
    <title>Document</title>
  </head>
  <body>
    <div class="nav">
      <a href="/store/storeIndex">首頁</a>
      <a href="/store/storeOrderRecord" class="orderRecords">歷史訂單</a>
    </div>
    <div class="topbar">待處理訂單</div>
    <% if(orderRecords){%> <%orderRecords.reverse().forEach((order) => {%>
    <div class="container">
      <div class="content">
        <div class="dishCount">
          <span>總共<%=order.totalQuantity%>份餐點</span>
          <span class="amount"><%=order.amount%>元</span>
          <span class="date">
            <%if(order.expirationTime-currentTime<=0){%>餐點需交付 <%}else{let
            remainingTimeInMinutes = Math.floor((order.expirationTime -
            currentTime) / 60000); %> 餐點製作還剩: <%=remainingTimeInMinutes%>
            分鐘 <%}%>
          </span>
        </div>
        <%order.foods.forEach((food) => {%>
        <div class="foods">
          <span class="portions"><%=food.quantity%></span>
          <span class="foodName"><%=food.foodsName%></span>
        </div>
        <%});%>
      </div>
      <%if(order.expiration!==true){%>
      <button class="submit" id="<%=order.id%>">完成交易</button>
      <%}%>
    </div>
    <%});}%>
  </body>
  <script>
    let orderSubmit = document.getElementsByClassName("submit");
    let container = document.getElementsByClassName("container");
    const Url = process.env.RAILWAY_URL || "http://127.0.0.1:3000"; // 使用 Railway URL 或者默認的本地 URL
    const socket = io(Url);
    socket.on("reloadPendingOrder", () => {
      console.log("get");
      location.reload();
    });

    getFetch(`${Url}/store/fetch/getStoreId`)
      .then((data) => {
        console.log(data);
        socket.emit("storeId", data.sid);
      })
      .catch((err) => {
        console.log(err);
      });

    for (let i = 0; i < orderSubmit.length; i++) {
      orderSubmit[i].addEventListener("click", () => {
        postData(`${Url}/store/fetch/completedOrder`, { [i]: 1 })
          .then((data) => {
            container[i].remove();
            socket.emit("completeOrder", data.accountId);
            location.reload();
          }) // JSON from `response.json()` call
          .catch((error) => console.log(error));
      });
    }

    function postData(url, data) {
      // Default options are marked with *
      return fetch(url, {
        body: JSON.stringify(data), // must match 'Content-Type' header
        cache: "no-cache", // *default, no-cache, reload, force-cache, only-if-cached
        credentials: "same-origin", // include, same-origin, *omit
        headers: {
          "user-agent": "Mozilla/4.0 MDN Example",
          "content-type": "application/json",
        },
        method: "POST", // *GET, POST, PUT, DELETE, etc.
        mode: "cors", // no-cors, cors, *same-origin
        redirect: "follow", // manual, *follow, error
        referrer: "no-referrer", // *client, no-referrer
      }).then((response) => response.json()); // 輸出成 json
    }

    function getFetch(url) {
      return fetch(url, {
        cache: "no-cache", // *default, no-cache, reload, force-cache, only-if-cached
        credentials: "same-origin", // include, same-origin, *omit
        headers: {
          "user-agent": "Mozilla/4.0 MDN Example",
          "content-type": "application/json",
        },
        method: "GET",
        mode: "cors", // no-cors, cors, *same-origin
        redirect: "follow", // manual, *follow, error
        referrer: "no-referrer", // *client, no-referrer
      }).then((response) => response.json());
    }
  </script>
</html>
