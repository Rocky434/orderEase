<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="https://cdn.jsdelivr.net/npm/socket.io-client/dist/socket.io.js"></script>
    <link rel="stylesheet" href="stylesheets/cart.css" />
    <title>Document</title>
  </head>
  <body>
    <div class="list" id="list"></div>
  </body>
  <script>
    let list = document.getElementById("list");
    let keys;
    let values;
    const Url = process.env.RAILWAY_URL || "http://127.0.0.1:3000"; // 使用 Railway URL 或者默認的本地 URL
    const socket = io(Url);
    getFetch(`${Url}/fetch/cart`)
      .then((data) => {
        console.log(data); // 确认是否能打印出返回的数据
        keys = Object.keys(data);
        values = Object.values(data);
        reRender();
      })
      .catch((error) => {
        console.log(
          "There has been a problem with your fetch operation:",
          error
        );
      });

    function reRender() {
      let check = 0;
      console.log("exercise rerender");
      if (keys.length > 0) {
        let listHtml = `
        </div>`;
        for (let i = 0; i < keys.length; i++) {
          check += values[i][0] * values[i][1];
          listHtml += `<div class="ob">
          <span class="foodname" >${keys[i]}</span>
          <button class="decrementbtn" id="decrementbtn">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              height="1em"
              viewBox="0 0 448 512"
            >
              <!--! Font Awesome Free 6.4.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. -->
              <path
                d="M432 256c0 17.7-14.3 32-32 32L48 288c-17.7 0-32-14.3-32-32s14.3-32 32-32l352 0c17.7 0 32 14.3 32 32z"
              />
            </svg>
          </button>
          <span class="foodnum" id="foodnum">${values[i][0]}</span>
          <button class="addbtn" id="addbtn">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              height="1em"
              viewBox="0 0 448 512"
            >
              <!--! Font Awesome Free 6.4.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. -->
              <path
                d="M256 80c0-17.7-14.3-32-32-32s-32 14.3-32 32V224H48c-17.7 0-32 14.3-32 32s14.3 32 32 32H192V432c0 17.7 14.3 32 32 32s32-14.3 32-32V288H400c17.7 0 32-14.3 32-32s-14.3-32-32-32H256V80z"
              />
            </svg>
          </button>
        </div>`;
        }
        listHtml += `
        <div class="line">
        <div class="list_topbar">
        <span>${keys.length}項商品</span>
        <span>小計:$${check}</span>
        </div>
        <button id="submit">提交訂單</button>`;
        list.innerHTML = listHtml; // 設置 innerHTML
      } else {
        list.innerHTML = "";
      }

      let addbtn = document.getElementsByClassName("addbtn");
      let decrementbtn = document.getElementsByClassName("decrementbtn");
      let submit = document.getElementById("submit");

      submit.addEventListener("click", () => {
        getFetch(`${Url}/fetch/addOrder`)
          .then((res) => {
            socket.emit("addOrder");
            console.log(res.orderId);
            window.location.href = res.url; // 页面重定向到根路径
          })
          .catch((error) => {
            console.log(error);
          });
      });

      for (let i = 0; i < addbtn.length; i++) {
        addbtn[i].addEventListener("click", () => {
          postData(`${Url}/fetch/cart`, { [i]: 1 })
            .then((data) => {
              keys = Object.keys(data);
              values = Object.values(data);
              reRender();
            }) // JSON from `response.json()` call
            .catch((error) => console.log(error));
        });
      }

      for (let i = 0; i < addbtn.length; i++) {
        decrementbtn[i].addEventListener("click", () => {
          postData(`${Url}/fetch/cart`, { [i]: -1 })
            .then((data) => {
              keys = Object.keys(data);
              values = Object.values(data);
              reRender();
            }) // JSON from `response.json()` call
            .catch((error) => console.log(error));
        });
      }

      function postData(url, data) {
        // Default options are marked with *
        return fetch(url, {
          body: JSON.stringify(data), // must match 'Content-Type' header
          cache: "no-cache", // *default, no-cache, reload, force-cache, only-if-cached
          credentials: "same-origin", // include, same-origin, *omit
          headers: {
            "user-agent": "Mozilla/4.0 MDN Example",
            "content-type": "application/json",
          },
          method: "POST", // *GET, POST, PUT, DELETE, etc.
          mode: "cors", // no-cors, cors, *same-origin
          redirect: "follow", // manual, *follow, error
          referrer: "no-referrer", // *client, no-referrer
        }).then((response) => response.json()); // 輸出成 json
      }

      // let addbtn = document.getElementsByClassName("addbtn");
      // let num = document.getElementsByClassName("foodnum");
      // let decrementbtn = document.getElementsByClassName("decrementbtn");

      // for (let i = 0; i < addbtn.length; i++) {
      //   addbtn[i].addEventListener("click", () => {
      //     num[i].innerHTML = String(Number(num[i].innerHTML) + 1);
      //     localStorage.setItem(keys[i], num[i].innerHTML);
      //   });
      // }
      // for (let i = 0; i < decrementbtn.length; i++) {
      //   decrementbtn[i].addEventListener("click", () => {
      //     if (Number(num[i].innerHTML) - 1 >= 0) {
      //       num[i].innerHTML = String(Number(num[i].innerHTML) - 1);
      //       localStorage.setItem(keys[i], num[i].innerHTML);
      //     }

      //     if (Number(num[i].innerHTML) < 1) {
      //       localStorage.removeItem(keys[i]);
      //       reRender();
      //       num = document.getElementsByClassName("foodnum");
      //     } else {
      //     }
      //   });
      // }
    }

    function getFetch(url) {
      return fetch(url, {
        cache: "no-cache", // *default, no-cache, reload, force-cache, only-if-cached
        credentials: "same-origin", // include, same-origin, *omit
        headers: {
          "user-agent": "Mozilla/4.0 MDN Example",
          "content-type": "application/json",
        },
        method: "GET",
        mode: "cors", // no-cors, cors, *same-origin
        redirect: "follow", // manual, *follow, error
        referrer: "no-referrer", // *client, no-referrer
      }).then((response) => response.json());
    }
  </script>
</html>
